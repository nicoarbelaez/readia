-- Crear SCHEMA
CREATE SCHEMA IF NOT EXISTS public_web;

-- Crear entidades
CREATE TABLE
 public_web.users (
  id UUID PRIMARY KEY REFERENCES auth.users (id) ON DELETE CASCADE,
  full_name TEXT,
  email TEXT UNIQUE,
  create_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  update_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
 );

CREATE TABLE
 public_web.businesses (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_owner_id UUID NOT NULL REFERENCES public_web.users (id) ON DELETE CASCADE,
  create_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  update_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
 );

--Crear triggers para el update_at
CREATE
OR REPLACE FUNCTION public_web.set_updated_at () RETURNS TRIGGER AS $$
BEGIN
    NEW .updated_at := now();
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_set_updated_at_users BEFORE
UPDATE ON public_web.users FOR EACH ROW
EXECUTE FUNCTION public_web.set_updated_at ();

CREATE TRIGGER trg_set_updated_at_businesses BEFORE
UPDATE ON public_web.businesses FOR EACH ROW
EXECUTE FUNCTION public_web.set_updated_at ();

-- Habilitar RLS y políticas de acceso
-- Users
ALTER TABLE public_web.users ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Los usuarios pueden seleccionar su propio registro de usuario" ON public_web.users FOR
SELECT
 TO authenticated USING (auth.uid () = id);

CREATE POLICY "Los usuarios pueden insertar su propio registro de usuario" ON public_web.users FOR INSERT TO authenticated
WITH
 CHECK (auth.uid () = id);

CREATE POLICY "Los usuarios pueden actualizar su propio registro de usuario" ON public_web.users FOR
UPDATE TO authenticated USING (auth.uid () = id);

-- Businesses
ALTER TABLE public_web.businesses ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Los usuarios pueden seleccionar sus propios negocios" ON public_web.businesses FOR
SELECT
 TO authenticated USING (
  user_owner_id = auth.uid ()
 );

CREATE POLICY "Los usuarios pueden insertar sus propios negocios" ON public_web.businesses FOR INSERT TO authenticated
WITH
 CHECK (
  user_owner_id = auth.uid ()
 );

CREATE POLICY "Los usuarios pueden actualizar sus propios negocios" ON public_web.businesses FOR
UPDATE TO authenticated USING (
 user_owner_id = auth.uid ()
);

-- Trigger para crear registro en public_web.users al registrarse vía Auth
CREATE
OR REPLACE FUNCTION public_web.handle_new_user () RETURNS TRIGGER SECURITY DEFINER AS $$
BEGIN
    INSERT INTO
        public_web.users (id)
    VALUES
        (NEW .id) ON CONFLICT DO NOTHING;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users FOR EACH ROW
EXECUTE FUNCTION public_web.handle_new_user ();